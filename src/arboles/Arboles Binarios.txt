Arboles Binarios

Un árbol binario es una estructura de datos útil cuando se trata de hacer modelos de procesos en 
donde se requiere tomar decisiones en uno de dos sentidos en cada parte del proceso. Por ejemplo, 
supongamos que tenemos un arreglo en donde queremos encontrar todos los duplicados. 
Esta situación es bastante útil en el manejo de las bases de datos, para evitar un problema que se llama redundancia.

Una manera de encontrar los elementos duplicados en un arreglo es recorrer todo el arreglo y comparar 
con cada uno de los elementos del arreglo. Esto implica que si el arreglo tiene (n) elementos, 
se deben hacer (n) comparaciones, esto no es mucho problema si (n) es un número pequeño, 
pero el problema se va complicando más a medida que (n) aumenta.

Si usamos un árbol binario, el número de comparaciones se reduce bastante, veamos cómo.

El primer número del arreglo se coloca en la raíz del árbol con sus subárboles izquierdo y derecho vacíos. 
Luego, cada elemento del arreglo se compara con la información del nodo raíz y se crean los nuevos hijos con el siguiente criterio:

Si el elemento es igual que el nodo raíz, entonces notificar duplicidad.
Si el elemento es menor que el nodo raíz, entonces se crea un hijo izquierdo.
Si el elemento es mayor que el nodo raíz, entonces se crea un hijo derecho.

Una vez que creado el árbol, se pueden iniciar la búsqueda delos elementos repetidos.

Debido a que solo tenemos conocimiento del contenido de la dirección de un nodo a la vez. 
Al recorrer el árbol es necesario tener la dirección de cada nodo, no necesariamente todos al mismo tiempo, 
de hecho normalmente se tiene la dirección de uno o dos nodos a la vez; 
de manera que cuando se tiene la dirección de un nodo, se dice que se visita ese nodo

Los tres criterios principales para recorrer un árbol son:

preorden:
--Visitar la raíz
--recorrer el subárbol izquierdo en preorden
--recorrer el subárbol derecho en preorden

entreorden:
--recorrer el subárbol izquierdo en entreorden
--Visitar la raíz
--recorrer el subárbol derecho en entreorden

postorden:
--recorrer el subárbol izquierdo en postorden
--recorrer el subárbol derecho en postorden
--Visitar la raíz

{14, 15, 4, 9, 7, 18, 3, 5, 16, 20, 17};

      14
     /  \
    4    15
   / \    \
  3  9     18
    /     /  \
   7     16  20
  /        \
 5         17


Considerando el árbol anterior:
Se obtienen las siguientes secuencias del recorrido:

Preorden:  14,4,3,9,7,5,15,18,16,17,20
Entreorden:  3,4,5,7,9,14,15,16,17,18,20
Postorden:  3,5,7,9,4,17,16,20,18,15,14


Esto nos lleva a pensar en otra aplicación, el ordenamiento de los elementos.
Para ordenar los elementos, basta recorrer el árbol en secuencia:  Entreorden